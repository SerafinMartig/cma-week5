---
title: "Untitled"
format: html
---


# Task and inputs
```{r}


testfun <- function() {}


testfun()


class(testfun)

testfun <- function() {
    print("this function does nothing")
}

testfun()

testfun <- function(sometext) {
    print(sometext)
}

testfun(sometext = "this function does slightly more, but still not much")



my_age <- function(birthday, output_unit) {
    difftime(Sys.time(), birthday, units = output_unit)
}

my_age(birthday = "1997-04-23", output_unit = "days")


my_age("1997-04-23", "days")

my_age <- function(birthday, output_unit = "days") {
    difftime(Sys.time(), birthday, units = output_unit)
}

# if not stated otherwise, our function uses the unit "days"
my_age("1997-04-23")

# We can still overwrite units
my_age("1997-04-23", "hours")

```









#Task 1: Write your own functions
```{r}
# 1. BMI
bmi <- function(weight, height) {
  bmi <- weight / (height ^ 2)

}

# 2. Celsius to Fahrenheit 
celsius_to_fahrenheit <- function(celsius) {
  fahrenheit <- (celsius * 9/5) + 32
}

# 3. Euclidean Distance 
calculate_distance <- function(x1, y1, x2, y2) {
  distance <- sqrt((x2 - x1)^2 + (y2 - y1)^2)
}
```


#Task 2: Prepare Analysis
```{r}
# Import  CSV 
wild_boar <- read.csv("Datasets-20240517/wildschwein_BE_2056.csv", stringsAsFactors = FALSE)

colnames(wild_boar)
wild_boar
str(wild_boar)

# time as POSIXct 
wild_boar$DatetimeUTC <- as.POSIXct(wild_boar$DatetimeUTC, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC")

# Filter Ros, Sabi and Timestamp
wild_boar_filtered <- wild_boar |> 
  filter(TierName %in% c("Rosa", "Sabi") &
         DatetimeUTC >= as.POSIXct("2015-04-01 00:00:00", tz = "UTC") &
         DatetimeUTC <= as.POSIXct("2015-04-15 23:59:59", tz = "UTC"))


wild_boar_filtered

```

# Task 3: Create Join Key
```{r}
# Round the minutes of DatetimeUTC to a multiple of 15 (00, 15, 30, 45) and store the values in a new column
wild_boar_rounded <- wild_boar_filtered %>%
  mutate(DatetimeRound = round_date(DatetimeUTC, unit = "15 minutes"))

```

# Task 4: Measuring distance at concurrent locations
```{r}
# separate DF per Animal
rosa <- wild_boar_rounded %>% filter(TierName == "Rosa")
sabi <- wild_boar_rounded %>% filter(TierName == "Sabi")

# Join the datasets by  DatetimeRound 
rosa_sabi_joined <- inner_join(rosa, sabi, by = "DatetimeRound", suffix = c(".Rosa", ".Sabi"))

# Euclidean distances between concurrent observations
rosa_sabi_joined2 <- rosa_sabi_joined %>%
  mutate(Distance = sqrt((E.Rosa - E.Sabi)^2 + (N.Rosa - N.Sabi)^2))

# threshold < 100 Meters = they meet

rosa_sabi_meet <- rosa_sabi_joined2 %>%
  mutate(Meet = Distance <= 100)

rosa_sabi_meet
```



#Task 5: Visualize data
```{r}
# Filter meets
meets <- joined_data %>% filter(Meet == TRUE)

# plot
ggplot() +
  geom_point(data = rosa, aes(x = E, y = N), color = "red", alpha = 0.5) +
  geom_point(data = sabi, aes(x = E, y = N), color = "blue", alpha = 0.5) +
  geom_point(data = meets, aes(x = (E.Rosa + E.Sabi) / 2, y = (N.Rosa + N.Sabi) / 2), color = "green", size = 2, alpha = 0.7) +
  labs(title = "Spatial Visualization of Wild Boar Meets",
       x = "Easting",
       y = "Northing") +
  xlim(min(c(rosa$E, sabi$E)) - 100, max(c(rosa$E, sabi$E)) + 100) +
  ylim(min(c(rosa$N, sabi$N)) - 100, max(c(rosa$N, sabi$N)) + 100) +
  theme_minimal()
```



